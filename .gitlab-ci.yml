image: $CI_REGISTRY/knot/knot-resolver/ci/debian-stable:knot-master

variables:
  DEBIAN_FRONTEND: noninteractive
  LC_ALL: C.UTF-8
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_STRATEGY: clone # sometimes unclean submodule dirs otherwise
  COVERAGE: '1'
  PREFIX: $CI_PROJECT_DIR/.local
  LD_LIBRARY_PATH: $CI_PROJECT_DIR/.local/lib

stages:
  - build
  - test
  - coverage
  - deploy

build:linux:amd64:
  stage: build
  script:
    - rm daemon/lua/kres-gen.lua
    - make -k all CFLAGS="-Werror -ggdb"
    - STATUS="$(git status --untracked-files=normal --porcelain)"
    - test -n "${STATUS}" && echo "${STATUS}" && echo "Build + install made working tree dirty, did you forget to update something?" && exit 2
    - make install CFLAGS="-Werror -ggdb"
  artifacts:
    untracked: true
  tags:
    - docker
    - linux
    - amd64

build:clang:linux:amd64:
  stage: build
  image: $CI_REGISTRY/knot/knot-resolver/ci/debian-unstable:knot-master  # newer Debian for newer Clang
  script:
    - rm daemon/lua/kres-gen.lua
    - CXX=clang++-5.0 CC=clang-5.0 make -k all "CFLAGS=-Werror -Wno-error=unused-command-line-argument -ggdb"
    - STATUS="$(git status --untracked-files=normal --porcelain)"
    - test -n "${STATUS}" && echo "${STATUS}" && echo "Build + install made working tree dirty, did you forget to update something?" && exit 2
    - CXX=clang++-5.0 CC=clang-5.0 make install "CFLAGS=-Werror -ggdb"
  tags:
    - docker
    - linux
    - amd64

srpm:
  stage: build
  allow_failure: true  # don't block testing pipeline in case of failure
  image: $CI_REGISTRY/knot/knot-resolver/ci:fedora-27
  script:
    - scripts/make-srpm.sh
  artifacts:
    when: always
    expire_in: '1 week'
    paths:
      - "*.src.rpm"
  tags:
    - docker
    - linux
    - amd64

lint:lua:
  stage: test
  dependencies: []  # do not download build artifacts
  script:
    - make lint-lua
  tags:
    - docker

lint:c:
  stage: test
  image: $CI_REGISTRY/knot/knot-resolver/ci/debian-unstable:knot-master  # newer Debian for newer Clang
  dependencies: []  # do not download build artifacts
  script:
    - make lint-c CLANG_TIDY="clang-tidy-5.0 -quiet"
  tags:
    - docker

lint:clang-scan-build:
  allow_failure: true  # for now it is just informative
  stage: test
  image: $CI_REGISTRY/knot/knot-resolver/ci/debian-unstable:knot-master  # newer Debian for newer Clang
  dependencies: []  # do not download build artifacts
  script:
    - MAKEFLAGS="-k -j$(nproc)" SCAN_BUILD="/usr/lib/llvm-5.0/bin/scan-build -o scan-results --status-bugs -no-failure-reports" ./tests/clang_scan_build.sh make
  artifacts:
    when: on_failure
    expire_in: '1 day'
    paths:
      - scan-results
  tags:
    - docker

test:linux:amd64:
  stage: test
  script:
    # recompile everything otherwise lcov will bark because Git files will be "newer" than gcda files
    # this is caused by interaction between Git approach to timestamps and Gitlab artifacts
    - git clean -xdf
    - make CFLAGS=-Werror
    - MAKEFLAGS="--jobs $(nproc)" make -k check
    - MAKEFLAGS="--jobs $(nproc)" make coverage-c COVERAGE_STAGE=gcov-check
  dependencies: []
  artifacts:
    expire_in: 1 hour
    paths:
      - ./*.info
  tags:
    - docker
    - linux
    - amd64

installcheck:linux:amd64:
  stage: test
  script:
    # recompile everything otherwise lcov will bark because Git files will be "newer" than gcda files
    # this is caused by interaction between Git approach to timestamps and Gitlab artifacts
    - git clean -xdf
    - make install CFLAGS=-Werror
    - MAKEFLAGS="--jobs $(nproc) --keep-going" make -k installcheck
    - MAKEFLAGS="--jobs $(nproc)" make coverage-c coverage-lua COVERAGE_STAGE=gcov-installcheck
  dependencies: []
  artifacts:
    expire_in: 1 hour
    paths:
      - ./*.info
  tags:
    - docker
    - linux
    - amd64

doc:
  stage: test
  script:
    - SPHINXFLAGS="-W" make doc
  dependencies: []
  artifacts:
    expire_in: 1 hour
    paths:
      - ./doc/*
  tags:
    - docker

deckard:linux:amd64:
  stage: test
  except:
    - schedules  # prevent unstable test from cancelling nightly OBS build
  script:
    - DECKARDFLAGS="-n $(nproc)" PATH="$PREFIX/sbin:$PATH" make check-integration
    - MAKEFLAGS="--jobs $(nproc)" make coverage-c coverage-lua COVERAGE_STAGE=gcov-deckard
  dependencies:
    - build:linux:amd64
  artifacts:
    expire_in: 1 hour
    paths:
      - ./*.info
  tags:
    - docker
    - linux
    - amd64

installcheck:valgrind:linux:amd64:
  stage: test
  script:
    - DEBUGGER="valgrind --leak-check=full --trace-children=yes --quiet --suppressions=/lj.supp" make -k installcheck
  dependencies:
    - build:linux:amd64
  tags:
    - docker
    - linux
    - amd64

# temporarily disabled - we need to fix issues first
#deckard:linux:amd64:valgrind:
#  stage: test
#  script:
#    # TODO: valgrind missing parameter --error-exitcode=1 to fail make on error
#    - cd tests/deckard && DAEMON=valgrind ADDITIONAL="--leak-check=full --trace-children=yes --quiet --suppressions=/lj.supp $PREFIX/sbin/kresd -f 1" MAKEFLAGS="-j $(nproc) --keep-going" make
#  artifacts:
#    when: on_failure
#    expire_in: 1 week
#    paths:
#      - tmpdeckard*
#  dependencies:
#    - build:linux:amd64
#  tags:
#    - docker
#    - linux
#    - amd64


test:linux:amd64:valgrind:
  stage: test
  variables:
    TMPDIR: $CI_PROJECT_DIR
  script:
    - DEBUGGER="valgrind --error-exitcode=1 --leak-check=full --trace-children=yes --quiet --suppressions=/lj.supp" make -k check
  dependencies:
    - build:linux:amd64
  tags:
    - docker
    - linux
    - amd64
  artifacts:
    when: on_failure
    expire_in: 1 week
    paths:
      - tmpdeckard*


respdiff:iter:udp:linux:amd64:
  stage: test
  script:
    - source <(./scripts/coverage_env.sh "$(pwd)" "$(pwd)/coverage.stats/respdiff" "iter/udp" --export)
    - ulimit -n "$(ulimit -Hn)" # applies only for kresd ATM
    - ./ci/respdiff/start-resolvers.sh
    - ./ci/respdiff/run-respdiff-tests.sh udp
    - cat results/respdiff.txt
    - echo 'test if mismatch rate < 0.8 %'
    - grep -q '^target disagrees.*0\.[0-7][0-9] %' results/respdiff.txt
    - killall --wait kresd
    - MAKEFLAGS="--jobs $(nproc)" make coverage-c coverage-lua COVERAGE_STAGE=gcov-respdiff-iter-udp
  dependencies:
    - build:linux:amd64
  artifacts:
    when: always
    expire_in: '1 week'
    paths:
      - kresd.log.xz
      - results/*.txt
      - results/*.svg
      - results/respdiff.db/data.mdb.xz
      - ./*.info
  tags:
    - docker
    - linux
    - amd64

respdiff:iter:tcp:linux:amd64:
  stage: test
  script:
    - source <(./scripts/coverage_env.sh "$(pwd)" "$(pwd)/coverage.stats/respdiff" "iter/tcp" --export)
    - ./ci/respdiff/start-resolvers.sh
    - ./ci/respdiff/run-respdiff-tests.sh tcp
    - cat results/respdiff.txt
    - echo 'test if mismatch rate < 0.8 %'
    - grep -q '^target disagrees.*0\.[0-7][0-9] %' results/respdiff.txt
    - killall --wait kresd
    - MAKEFLAGS="--jobs $(nproc)" make coverage-c coverage-lua COVERAGE_STAGE=gcov-respdiff-iter-tcp
  dependencies:
    - build:linux:amd64
  artifacts:
    when: always
    expire_in: '1 week'
    paths:
      - kresd.log.xz
      - results/*.txt
      - results/*.svg
      - results/respdiff.db/data.mdb.xz
      - ./*.info
  tags:
    - docker
    - linux
    - amd64

respdiff:iter:tls:linux:amd64:
  stage: test
  script:
    - source <(./scripts/coverage_env.sh "$(pwd)" "$(pwd)/coverage.stats/respdiff" "iter/tls" --export)
    - ./ci/respdiff/start-resolvers.sh
    - ./ci/respdiff/run-respdiff-tests.sh tls
    - cat results/respdiff.txt
    - echo 'test if mismatch rate < 0.8 %'
    - grep -q '^target disagrees.*0\.[0-7][0-9] %' results/respdiff.txt
    - killall --wait kresd
    - MAKEFLAGS="--jobs $(nproc)" make coverage-c coverage-lua COVERAGE_STAGE=gcov-respdiff-iter-tls
  dependencies:
    - build:linux:amd64
  artifacts:
    when: always
    expire_in: '1 week'
    paths:
      - kresd.log.xz
      - results/*.txt
      - results/*.svg
      - results/respdiff.db/data.mdb.xz
      - ./*.info
  tags:
    - docker
    - linux
    - amd64

distro:fedora-27:
  stage: test
  image: $CI_REGISTRY/knot/knot-resolver/ci:fedora-27
  only:
    - branches@knot/knot-resolver  # do not trigger job for forks (no privileged runners)
  dependencies:
    - srpm
  script:
    - mock --old-chroot -r fedora-27-x86_64 --rebuild *.src.rpm
  after_script:
    - mv /var/lib/mock/fedora-27-x86_64/result fedora-27-x86_64
  artifacts:
    when: always
    expire_in: '1 week'
    paths:
      - fedora-27-x86_64/
  tags:
    - privileged  # mock requires additional capabilities (e.g. mount)

distro:epel-7:
  stage: test
  image: $CI_REGISTRY/knot/knot-resolver/ci:fedora-27
  only:
    - branches@knot/knot-resolver  # do not trigger job for forks (no privileged runners)
  dependencies:
    - srpm
  script:
    - mock --dnf --old-chroot -r epel-7-x86_64 --rebuild *.src.rpm || (cat /var/lib/mock/epel-7-x86_64/result/build.log; false)
  after_script:
    - mv /var/lib/mock/epel-7-x86_64/result epel-7-x86_64
  artifacts:
    when: always
    expire_in: '1 week'
    paths:
      - epel-7-x86_64/
  tags:
    - privileged  # mock require additional capabilities (e.g. mount)

# compute coverage for all runs
coverage:
  stage: coverage
  script:
    - make coverage
  artifacts:
    expire_in: '1 week'
    paths:
      - coverage
  coverage: '/lines\.+:\s(\d+.\d+\%)/'
  dependencies:
    - build:linux:amd64
    - test:linux:amd64
    - installcheck:linux:amd64
    - deckard:linux:amd64
    - respdiff:iter:udp:linux:amd64
    - respdiff:iter:tcp:linux:amd64
    - respdiff:iter:tls:linux:amd64
  tags:
    - docker
    - linux
    - amd64

# publish coverage only for master branch
pages:
  stage: deploy
  only:
    - master
  dependencies:
    - coverage
  script:
    - mv coverage/ public/
  artifacts:
    expire_in: '30 days'
    paths:
      - public

# trigger obs build for master branch
obs:devel:
  stage: deploy
  only:
    - schedules
  dependencies: []
  script:
    - scripts/make-archive.sh
    - scripts/make-distrofiles.sh
    - echo -e "[general]\napiurl = https://api.opensuse.org\n\n[https://api.opensuse.org]\nuser = CZ-NIC-automation\npass = $OBS_PASSWORD" > /root/.oscrc
    - scripts/build-in-obs.sh knot-dns-devel  # build against latest development version of knot
    - scripts/build-in-obs.sh knot-resolver-devel  # build against knot in knot-resolver-latest

#arm_build:
#  image: cznic/armhf-ubuntu:16.04
#  stage: build
#  script:
#    - make -k all
#  tags:
#    - docker
#    - linux
#    - arm

#arm_test:
#  image: armv7/armhf-ubuntu:16.04
#  stage: test
#  script:
#    - make -k check
#  tags:
#    - docker
#    - linux
#    - arm
