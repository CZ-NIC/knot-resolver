.TH "kresd.systemd" "7" "@date@" "CZ.NIC" "Knot Resolver @version@ Systemd Units"
.\"
.\" kresd.systemd.7 -- man page for systemd units for kresd
.\"
.\" Copyright (c) 2018, CZ.NIC. All rights reserved.
.\"
.\" See COPYING for the license.
.\"
.\"
.SH "NAME"
kresd.systemd
\- managing Knot Resolver @version@ through systemd.

.SH "SYNOPSIS"
.nf
kresd@.service
kresd.socket
kresd-tls.socket
kresd-control@.socket
kresd-doh.socket
kresd-webmgmt.socket
kresd.target
system-kresd.slice
.fi

.SH "DESCRIPTION"
.P
This manual page describes how to manage \fBkresd\fR using \fBsystemd\fR
units.

.B Socket activation

\fBkresd\fR integration with systemd takes advantage of socket activation,
which enables the daemon to run without super user priviledges or any
additional capabilities. The network interface sockets are created by systemd
and then passed to the daemon.

Network configuration has to take place in \fIsystemd.socket(5)\fR, which can
be done using drop-in files.  Each instance of \fIkresd@.service\fR may have
these systemd sockets associated with it:

.nf
.RS
\fIkresd.socket\fR - UDP/TCP network socket (default: localhost:53)
\fIkresd-tls.socket\fR - network socket for DNS-over-TLS (default: localhost:853)
\fIkresd-control@.socket\fR - UNIX socket with control terminal
\fIkresd-doh.socket\fR - DNS-over-HTTPS (with http module: localhost:44353)
\fIkresd-webmgmt.socket\fR - web management and APIs (with http module: localhost:8453)
.RE
.fi

.B Configuring network interfaces

To configure \fBkresd\fR to listen on public interfaces, drop-in files (see
\fIsystemd.unit\fR(5)) should be used. These can be created with:

.nf
.RS 4n
.B systemctl edit kresd.socket
.B systemctl edit kresd-tls.socket
.B systemctl edit kresd-doh.socket
.RE
.fi

If you change network interfaces of systemd sockets for already running kresd instance,
make sure to call \fBsystemctl restart system-kresd.slice\fR for these changes
to take effect.

For example, to configure \fBkresd\fR to listen on 192.0.2.115 on ports 53 and
853, the drop-in files would look like:

.nf
.RS 4n
# /etc/systemd/system/kresd.socket.d/override.conf
[Socket]
ListenDatagram=192.0.2.115:53
ListenStream=192.0.2.115:53

# /etc/systemd/system/kresd-tls.socket.d/override.conf
[Socket]
ListenStream=192.0.2.115:853
.RE
.fi

To configure \fBkresd\fR to listen on all IPv4 and IPv6 interfaces, use empty
\fIListenDatagram=\fR and \fIListenStream=\fR directives to remove the default
localhost address and then specify port to bind to. If you've disabled IPv6
support in kernel, use the 0.0.0.0:port syntax instead.

.nf
.RS 4n
# /etc/systemd/system/kresd.socket.d/override.conf
[Socket]
ListenDatagram=
ListenStream=
ListenDatagram=53
ListenStream=53

# /etc/systemd/system/kresd-tls.socket.d/override.conf
[Socket]
ListenStream=
ListenStream=853
.RE
.fi

Please note that using IPv6 to bind to IPv4 interfaces is currently not
compatible with IPv4 syntax in \fIview:addr()\fR when using the view module.
For possible workarounds, see
https://gitlab.labs.nic.cz/knot/knot-resolver/issues/445

To configure socket for DNS-over-HTTPS, make sure you have
\fBkresd-doh.socket\fR installed (it might be part of a separate
knot-resolver-module-http package).  Then, you can configure its network
interfaces as above. Also, don't forget to load http module in configuration
file, otherwise the socket won't have any function.

For example, to remove the default localhost:44353 and listen on all interfaces
on port 443, create the following drop-in file for \fBkresd-doh.socket\fR:

.nf
.RS 4n
# /etc/systemd/system/kresd-doh.socket.d/override.conf
[Socket]
ListenStream=
ListenStream=443
.RE
.fi

Make sure no other service is using port 443, as that will result in
unpredictable behaviour. Alternately, you can use port 44353 where a collision
is unlikely.

For more detailed socket configuration, see \fBsystemd.socket\fR(5).

.B Concurrent daemons

\fBkresd\fR daemon can be executed in multiple independent processes, which are
managed with \fBsystemd\fR via systemd templates (see \fBsystemd.unit\fR(5)).
Each \fBsystemd\fR service instance of \fBkresd\fR (\fIkresd@.service\fR)
represents a single, independent kresd process.

The systemd-managed \fBkresd\fR service set is grouped in the
\fIsystem-kresd.slice\fR slice.  The slice includes one or more running daemons
(instances of \fIkresd@.service\fR), network sockets \fIkresd.socket\fR and
\fIkresd-tls.socket\fR (shared by all instances) and a dedicated control
\fIkresd-control@.socket\fR for each running daemon.

If you have more than one CPU core available, a single running
\fBkresd\fR daemon will only be able to make use of one core at a
time, leaving the other cores idle.  If you want \fBkresd\fR to take
advantage of all available cores, while sharing both cache and public
listening ports, you should enable and start as many instances of the
\fBkresd@.service\fR as you have cores.  Typically, each instance is
just named \fIkresd@\fBN\fI.service\fR, where \fIN\fR is a decimal
number.  To enable 3 concurrent daemons:

.nf
.RS 4n
.B systemctl enable --now kresd@1.service kresd@2.service kresd@3.service
.RE
.fi

.SH "NOTES"

.IP * 2
When an instance of \fIkresd@.service\fR is started, stopped or
restarted, its associated control socket is also automatically
started, stopped or restarted, but the public listening sockets remain
open.  As long as either of the public sockets are listening, at least
\fIkresd@1.service\fR will be automatically activated when a request arrives.

.SH "EXAMPLES"

To start the service:
.nf
.RS 4n
.B systemctl start kresd@1.service
.RE
.fi

To start the service at boot:
.nf
.RS 4n
.B systemctl enable kresd@1.service
.RE
.fi

To delay the service startup until some traffic arrives, start (or enable) just
the sockets:
.nf
.RS 4n
.B systemctl start kresd.socket
.B systemctl start kresd-tls.socket
.RE
.fi

To disable optional sockets, you can mask them. For example, to disable
DNS-over-TLS socket:

.RS 4n
.B systemctl mask kresd-tls.socket
.RE

.B Using system-kresd.slice and kresd.target

The easiest way to view the status of multiple \fBkresd\fR
instances is to use the \fIsystem-kresd.slice\fR:

.nf
.RS 4n
.B systemctl status system-kresd.slice
.RE
.fi

You can also use the slice to restart all sockets as well as daemons:

.nf
.RS 4n
.B systemctl restart system-kresd.slice
.RE
.fi

Alternatively, to restart just kresd daemons, you can use \fIBrace Expansion\fR:

.nf
.RS 4n
.B systemctl enable kresd@{1..4}.service
.RE
.fi

Or you can use it to stop kresd altogether (e.g. during package removal):

.nf
.RS 4n
.B systemctl stop system-kresd.slice
.RE
.fi

To start all enabled kresd daemons, use the provided \fIkresd.target\fR:

.nf
.RS 4n
.B systemctl start kresd.target
.RE
.fi

.RE

.SH "SEE ALSO"
\fIkresd(8)\fR,
\fIsystemd.unit(5)\fR,
\fIsystemd.socket(5)\fR,
\fIhttps://knot-resolver.readthedocs.io/en/v@version@/\fR

.SH "AUTHORS"
.B kresd
developers are mentioned in the AUTHORS file in the distribution.
