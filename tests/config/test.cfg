package.path = package.path .. ';' .. env.SOURCE_PATH .. '/?.lua'
TEST_DIR = env.TEST_FILE:match('(.*/)')

-- optional code coverage
local ok, runner = pcall(require, 'luacov.runner')
if ok then
	runner.init({
		savestepsize = 2,
		statsfile = TEST_DIR .. '/luacov.stats.out',
		exclude = {'test', 'tapered'},
	})
	jit.off()
end

-- override os.exit to allow cleanup on exit
local exit = os.exit
os.exit = function (code)
	if code == 0 then
		quit()
	else
		exit(code) -- This will leak memory
	end
end

-- export testing module in globals
local tapered = require('tapered.src.tapered')
for k, v in pairs(tapered) do
	_G[k] = v
end

-- don't send priming queries etc.
modules.unload 'priming'
modules.unload 'ta_signal_query'

-- load test
local tests = dofile(env.TEST_FILE)

-- run test after processed config file
-- default config will be used and we can test it.
if tests then
	local runtest = require('test_utils').test
	worker.coroutine(function ()
		for _, t in ipairs(tests) do
			runtest(t)
		end
		done()
	end)
end