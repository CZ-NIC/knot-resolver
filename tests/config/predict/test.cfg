dofile('./test_utils.lua') -- load test utilities

-- setup resolver
modules = { 'predict' }

-- mock global functions
local resolve_count = 0
worker.resolve = function ()
	resolve_count = resolve_count + 1
end
stats.frequent = function ()
	return {
		{name = 'example.com', type = 'TYPE65535'},
		{name = 'example.com', type = 'SOA'},
	}
end
local current_epoch = 0
predict.epoch = function ()
	return current_epoch % predict.period + 1
end

-- test if draining of prefetch queue works
function test_predict_drain()
	predict.queue_len = 2
	predict.queue['TYPE65535 example.com'] = 1
	predict.queue['SOA example.com'] = 1
	predict.drain()
	-- test that it attempted to prefetch
	assert.same(2, resolve_count)
	assert.same(0, predict.queue_len)
end

-- test if prediction process works
function test_predict_process()
	-- start new epoch
	predict.process()
	assert.same(0, predict.queue_len)
	-- next epoch, still no period for frequent queries
	current_epoch = current_epoch + 1
	predict.process()
	assert.same(0, predict.queue_len)
	-- next epoch, found period
	current_epoch = current_epoch + 1
	predict.process()
	assert.same(2, predict.queue_len)
	-- drain works with scheduled prefetches (two batches)
	resolve_count = 0
	predict.drain()
	predict.drain()
	assert.same(2, resolve_count)
	assert.same(0, predict.queue_len)
end

-- run test after processed config file
-- default config will be used and we can test it.
event.after(0, function (ev) 
	test(test_predict_drain)
	test(test_predict_process)
	quit()
end)
