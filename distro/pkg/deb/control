Source: knot-resolver
Section: net
Priority: optional
Maintainer: Knot Resolver <knot-resolver@labs.nic.cz>
Build-Depends:
 debhelper (>= 12~),
 dh-python,
 libcmocka-dev (>= 1.0.0),
 libedit-dev,
 libfstrm-dev,
 libgnutls28-dev,
 libknot-dev (>= 3.0.2),
 liblmdb-dev,
 libluajit-5.1-dev,
 libnghttp2-dev,
 libprotobuf-c-dev,
 libsystemd-dev (>= 227) [linux-any],
 libcap-ng-dev,
 libuv1-dev,
 libjemalloc-dev,
 luajit,
 pkg-config,
 meson (>= 0.49),
 protobuf-c-compiler,
 python3,
 python3-dev,
 python3-setuptools,
 libssl-dev,
Homepage: https://www.knot-resolver.cz/

Package: knot-resolver-manager
Architecture: any
Provides:
 knot-resolver6,
Depends:
 knot-resolver-core (= ${binary:Version}),
 python3-aiohttp,
 python3-jinja2,
 python3-yaml,
 supervisor,
 ${misc:Depends},
 ${python3:Depends},
Recommends:
 python3-prometheus-client,
Section: python
Description: caching, DNSSEC-validating DNS resolver - config manager
 Knot Resolver is a caching full resolver implementation written in C and
 LuaJIT, including both a resolver library and a daemon.
 .
 This package contains Knot Resolver Manager - a configuration tool for Knot
 Resolver. The Manager hides the complexity of running several independent
 resolver processes while ensuring zero-downtime reconfiguration with YAML/JSON
 declarative configuration and an optional HTTP API for dynamic changes.

Package: knot-resolver-core
Architecture: any
Depends:
 adduser,
 dns-root-data,
 systemd,
 ${misc:Depends},
 ${shlibs:Depends},
Breaks:
 knot-resolver (<< 6),
Replaces:
 knot-resolver (<< 6),
Recommends:
 lua-basexx,
 lua-cqueues,
 lua-http,
 lua-psl,
Suggests:
 knot-resolver-module-http,
Description: caching, DNSSEC-validating DNS resolver - core binaries
 Knot Resolver is a caching full resolver implementation
 written in C and LuaJIT, including both a resolver library and a
 daemon. Modular architecture of the library keeps the core tiny and
 efficient, and provides a state-machine like API for
 extensions. There are three built-in modules - iterator, cache,
 validator, and many external.
 .
 The Lua modules, switchable and shareable cache, and fast FFI
 bindings makes it great to tap into resolution process, or be used
 for your recursive DNS service. It's the OpenResty of DNS.
 .
 The server adopts a different scaling strategy than the rest of the
 DNS recursors - no threading, shared-nothing architecture (except
 MVCC cache that may be shared). You can start and stop additional
 nodes depending on the contention without downtime.
 .
 This package contains the core resolver binaries.

Package: knot-resolver-core-dbg
Architecture: any
Depends:
 knot-resolver-core (= ${binary:Version}),
 ${misc:Depends}
Recommends: gdb
Section: debug
Priority: optional
Description: Debug symbols for Knot Resolver
 This package provides the debug symbols for Knot Resolver needed
 for properly debugging errors in Knot Resolver with gdb.

Package: knot-resolver-module-dnstap
Architecture: any
Multi-Arch: same
Depends:
 knot-resolver-core (= ${binary:Version}),
 libfstrm0,
 libprotobuf-c1,
 ${misc:Depends},
 ${shlibs:Depends},
Description: dnstap module for Knot Resolver
 The Knot Resolver is a caching full resolver implementation
 written in C and LuaJIT, including both a resolver library and a
 daemon. Modular architecture of the library keeps the core tiny and
 efficient, and provides a state-machine like API for
 extensions. There are three built-in modules - iterator, cache,
 validator, and many external.
 .
 This package contains dnstap module for logging DNS responses
 to a unix socket in dnstap format.

Package: knot-resolver-module-http
Architecture: all
Depends:
 knot-resolver-core (= ${binary:Version}),
 libjs-bootstrap,
 libjs-d3,
 libjs-jquery,
 lua-cqueues (>= 20171014),
 lua-http,
 lua-mmdb,
 systemd,
 ${misc:Depends},
 ${shlibs:Depends},
Breaks:
 knot-resolver-module-tinyweb (<< 1.1.0~git20160713-1~),
Description: HTTP module for Knot Resolver
 The Knot Resolver is a caching full resolver implementation
 written in C and LuaJIT, including both a resolver library and a
 daemon. Modular architecture of the library keeps the core tiny and
 efficient, and provides a state-machine like API for
 extensions. There are three built-in modules - iterator, cache,
 validator, and many external.
 .
 This package contains HTTP/2 module for local visualization of the
 resolver cache and queries.
