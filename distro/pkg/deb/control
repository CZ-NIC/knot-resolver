Source: knot-resolver
Section: net
Priority: optional
Maintainer: Knot Resolver <knot-resolver@labs.nic.cz>
Build-Depends:
 debhelper (>= 12~),
 dh-python,
 libcap-ng-dev,
 libcmocka-dev (>= 1.0.0),
 libfstrm-dev,
 libgnutls28-dev,
 libjemalloc-dev,
 libknot-dev (>= 3.0.2),
 liblmdb-dev,
 libluajit-5.1-dev,
 libnghttp2-dev,
 libprotobuf-c-dev,
 libssl-dev,
 libsystemd-dev (>= 227) [linux-any],
 libuv1-dev,
 luajit,
 meson (>= 0.49),
 pkg-config,
 protobuf-c-compiler,
 python3,
 python3-dev,
 python3-setuptools,
Standards-Version: 4.7.0
Homepage: https://www.knot-resolver.cz/
Rules-Requires-Root: no

Package: knot-resolver6
Architecture: any
Depends:
 adduser,
 dns-root-data,
 python3-aiohttp,
 python3-jinja2,
 python3-yaml,
 supervisor,
 systemd,
 ${misc:Depends},
 ${python3:Depends},
 ${shlibs:Depends},
Breaks:
 knot-resolver (<< 6),
 knot-resolver-core (<< 6.0.8),
 knot-resolver-manager (<< 6.0.8),
Replaces:
 knot-resolver (<< 6),
 knot-resolver-core (<< 6.0.8),
 knot-resolver-manager (<< 6.0.8),
Recommends:
 lua-basexx,
 lua-cqueues,
 lua-http,
 lua-psl,
 python3-prometheus-client,
 python3-watchdog,
Suggests:
 knot-resolver6-module-http,
Description: caching, DNSSEC-validating DNS resolver - core binaries
 Knot Resolver is a caching full resolver implementation
 written in C and LuaJIT, including both a resolver library and a
 daemon. Modular architecture of the library keeps the core tiny and
 efficient, and provides a state-machine like API for
 extensions. There are three built-in modules - iterator, cache,
 validator, and many external.
 .
 The Lua modules, switchable and shareable cache, and fast FFI
 bindings makes it great to tap into resolution process, or be used
 for your recursive DNS service. It's the OpenResty of DNS.
 .
 The server adopts a different scaling strategy than the rest of the
 DNS recursors - no threading, shared-nothing architecture (except
 MVCC cache that may be shared). You can start and stop additional
 nodes depending on the contention without downtime.
 .
 Knot Resolver Manager hides the complexity of running several independent
 resolver processes while ensuring zero-downtime reconfiguration with YAML/JSON
 declarative configuration and an optional HTTP API for dynamic changes.

Package: knot-resolver6-dev
Architecture: any
Depends:
 knot-resolver6 (= ${binary:Version}),
 ${misc:Depends},
Section: libdevel
Description: Knot Resolver development files
 Knot Resolver is a caching full resolver implementation
 written in C and LuaJIT, including both a resolver library and a
 daemon. Modular architecture of the library keeps the core tiny and
 efficient, and provides a state-machine like API for
 extensions.
 .
 This package provides the development headers for Knot Resolver.

Package: knot-resolver6-module-dnstap
Architecture: any
Depends:
 knot-resolver6 (= ${binary:Version}),
 libfstrm0,
 libprotobuf-c1,
 ${misc:Depends},
 ${shlibs:Depends},
Description: dnstap module for Knot Resolver
 The Knot Resolver is a caching full resolver implementation
 written in C and LuaJIT, including both a resolver library and a
 daemon. Modular architecture of the library keeps the core tiny and
 efficient, and provides a state-machine like API for
 extensions. There are three built-in modules - iterator, cache,
 validator, and many external.
 .
 This package contains dnstap module for logging DNS responses
 to a unix socket in dnstap format.

Package: knot-resolver6-module-http
Architecture: all
Depends:
 knot-resolver6 (>= ${source:Version}),
 libjs-bootstrap,
 libjs-d3,
 libjs-jquery,
 lua-cqueues (>= 20171014),
 lua-http,
 lua-mmdb,
 systemd,
 ${misc:Depends},
Description: HTTP module for Knot Resolver
 The Knot Resolver is a caching full resolver implementation
 written in C and LuaJIT, including both a resolver library and a
 daemon. Modular architecture of the library keeps the core tiny and
 efficient, and provides a state-machine like API for
 extensions. There are three built-in modules - iterator, cache,
 validator, and many external.
 .
 This package contains HTTP/2 module for local visualization of the
 resolver cache and queries.
