# Refer to manual: https://knot-resolver.readthedocs.io/en/stable/

network:
  listen:
    # unencrypted DNS on port 53
    - interface: &interfaces
        - 127.0.0.1
        - "::1"
    # DNS over TLS on port 853
    - interface: *interfaces
      kind: dot
    # DNS over HTTPS on port 443
    - interface: *interfaces
      kind: doh2

  # TLS certificate configuration
  # tls:
  #   cert-file: '/etc/knot-resolver/server-cert.pem'
  #   key-file: '/etc/knot-resolver/server-key.pem'

cache:
  size-max: 4G

views:
  # refuse everything that hasn't matched
  - subnets: [ 0.0.0.0/0, "::/0" ]
    answer: refused
  # whitelist queries identified by subnet
  - subnets: [ 192.0.2.0/24 ]
    answer: allow

local-data:
  rpz:
    # apply RPZ for all clients, default rule is DENY
    - file: blacklist.rpz

lua:
  script: |
    local ffi = require('ffi')

    -- log statistics every second
    local stat_id = event.recurrent(1 * second, function(evid)
        log_info(ffi.C.LOG_GRP_STATISTICS, table_print(stats.list()))
    end)

    -- stop printing statistics after first minute
    event.after(1 * minute, function(evid)
            event.cancel(stat_id)
    end)

    -- speed_monitor definition
    -- prints warning if more than 5% of total answers was slow
    function speed_monitor()
            local previous = stats.list()   -- store statistics in persistent variable
            return function(evid)
                    local now = stats.list()    -- save actual statistics to variable
                    -- number of total answers between 'now' and 'previous' states
                    local total_increment = now['answer.total'] - previous['answer.total']
                    -- number of slow answers between 'now' and 'previous' states
                    local slow_increment = now['answer.slow'] - previous['answer.slow']
                    -- if percentage of slow answers is bigger than 5%, print warning
                    if slow_increment / total_increment > 0.05 then
                            log_warn(ffi.C.LOG_GRP_STATISTICS, 'WARNING! More than 5 %% of queries was slow!')
                    end
                    previous = now
            end
    end

    -- execute speed_monitor every minute
    local monitor_id = event.recurrent(1 * minute, speed_monitor())
