"""
This type stub file was generated by pyright.
"""

class BasePoller:
    def __init__(self, options) -> None:
        ...
    
    def initialize(self): # -> None:
        ...
    
    def register_readable(self, fd):
        ...
    
    def register_writable(self, fd):
        ...
    
    def unregister_readable(self, fd):
        ...
    
    def unregister_writable(self, fd):
        ...
    
    def poll(self, timeout):
        ...
    
    def before_daemonize(self): # -> None:
        ...
    
    def after_daemonize(self): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


class SelectPoller(BasePoller):
    def initialize(self): # -> None:
        ...
    
    def register_readable(self, fd): # -> None:
        ...
    
    def register_writable(self, fd): # -> None:
        ...
    
    def unregister_readable(self, fd): # -> None:
        ...
    
    def unregister_writable(self, fd): # -> None:
        ...
    
    def unregister_all(self): # -> None:
        ...
    
    def poll(self, timeout): # -> tuple[list[Unknown], list[Unknown]] | tuple[List[Any], List[Any]]:
        ...
    


class PollPoller(BasePoller):
    def initialize(self): # -> None:
        ...
    
    def register_readable(self, fd): # -> None:
        ...
    
    def register_writable(self, fd): # -> None:
        ...
    
    def unregister_readable(self, fd): # -> None:
        ...
    
    def unregister_writable(self, fd): # -> None:
        ...
    
    def poll(self, timeout): # -> tuple[list[Unknown], list[Unknown]]:
        ...
    


class KQueuePoller(BasePoller):
    '''
    Wrapper for select.kqueue()/kevent()
    '''
    max_events = ...
    def initialize(self): # -> None:
        ...
    
    def register_readable(self, fd): # -> None:
        ...
    
    def register_writable(self, fd): # -> None:
        ...
    
    def unregister_readable(self, fd): # -> None:
        ...
    
    def unregister_writable(self, fd): # -> None:
        ...
    
    def poll(self, timeout): # -> tuple[list[Unknown], list[Unknown]]:
        ...
    
    def before_daemonize(self): # -> None:
        ...
    
    def after_daemonize(self): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


def implements_poll(): # -> bool:
    ...

def implements_kqueue(): # -> bool:
    ...

if implements_kqueue():
    Poller = ...
else:
    Poller = ...
    Poller = ...
