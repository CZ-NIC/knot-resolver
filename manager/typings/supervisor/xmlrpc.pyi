"""
This type stub file was generated by pyright.
"""

from supervisor.compat import httplib, xmlrpclib
from supervisor.medusa.xmlrpc_handler import xmlrpc_handler

class Faults:
    UNKNOWN_METHOD = ...
    INCORRECT_PARAMETERS = ...
    BAD_ARGUMENTS = ...
    SIGNATURE_UNSUPPORTED = ...
    SHUTDOWN_STATE = ...
    BAD_NAME = ...
    BAD_SIGNAL = ...
    NO_FILE = ...
    NOT_EXECUTABLE = ...
    FAILED = ...
    ABNORMAL_TERMINATION = ...
    SPAWN_ERROR = ...
    ALREADY_STARTED = ...
    NOT_RUNNING = ...
    SUCCESS = ...
    ALREADY_ADDED = ...
    STILL_RUNNING = ...
    CANT_REREAD = ...


def getFaultDescription(code): # -> str:
    ...

class RPCError(Exception):
    def __init__(self, code, extra=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class DeferredXMLRPCResponse:
    """ A medusa producer that implements a deferred callback; requires
    a subclass of asynchat.async_chat that handles NOT_DONE_YET sentinel """
    CONNECTION = ...
    def __init__(self, request, callback) -> None:
        ...
    
    def more(self): # -> Type[NOT_DONE_YET] | Literal[''] | None:
        ...
    
    def getresponse(self, body): # -> None:
        ...
    


def xmlrpc_marshal(value):
    ...

class SystemNamespaceRPCInterface:
    def __init__(self, namespaces) -> None:
        ...
    
    def listMethods(self): # -> list[Unknown]:
        """ Return an array listing the available method names

        @return array result  An array of method names available (strings).
        """
        ...
    
    def methodHelp(self, name):
        """ Return a string showing the method's documentation

        @param string name   The name of the method.
        @return string result The documentation for the method name.
        """
        ...
    
    def methodSignature(self, name): # -> List[Unknown]:
        """ Return an array describing the method signature in the
        form [rtype, ptype, ptype...] where rtype is the return data type
        of the method, and ptypes are the parameter data types that the
        method accepts in method argument order.

        @param string name  The name of the method.
        @return array result  The result.
        """
        ...
    
    def multicall(self, calls): # -> (remaining_calls: Unknown = remaining_calls, callbacks: Unknown = callbacks, results: Unknown = results) -> (Type[NOT_DONE_YET] | Unknown) | Type[NOT_DONE_YET] | list[Unknown]:
        """Process an array of calls, and return an array of
        results. Calls should be structs of the form {'methodName':
        string, 'params': array}. Each result will either be a
        single-item array containing the result value, or a struct of
        the form {'faultCode': int, 'faultString': string}. This is
        useful when you need to make lots of small calls without lots
        of round trips.

        @param array calls  An array of call requests
        @return array result  An array of results
        """
        ...
    


class AttrDict(dict):
    def __getattr__(self, name): # -> None:
        ...
    


class RootRPCInterface:
    def __init__(self, subinterfaces) -> None:
        ...
    


def capped_int(value): # -> int:
    ...

def make_datetime(text): # -> datetime:
    ...

class supervisor_xmlrpc_handler(xmlrpc_handler):
    path = ...
    IDENT = ...
    unmarshallers = ...
    def __init__(self, supervisord, subinterfaces) -> None:
        ...
    
    def loads(self, data): # -> tuple[tuple[Any, ...] | None, Any | None]:
        ...
    
    def match(self, request):
        ...
    
    def continue_request(self, data, request): # -> None:
        ...
    
    def call(self, method, params): # -> Any:
        ...
    


def traverse(ob, method, params): # -> Any:
    ...

class SupervisorTransport(xmlrpclib.Transport):
    """
    Provides a Transport for xmlrpclib that uses
    httplib.HTTPConnection in order to support persistent
    connections.  Also support basic auth and UNIX domain socket
    servers.
    """
    connection = ...
    def __init__(self, username=..., password=..., serverurl=...) -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def request(self, host, handler, request_body, verbose=...):
        ...
    


class UnixStreamHTTPConnection(httplib.HTTPConnection):
    def connect(self): # -> None:
        ...
    


def gettags(comment): # -> list[Unknown]:
    """ Parse documentation strings into JavaDoc-like tokens """
    ...
