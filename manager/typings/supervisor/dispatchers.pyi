"""
This type stub file was generated by pyright.
"""

def find_prefix_at_end(haystack, needle): # -> int:
    ...

class PDispatcher:
    """ Asyncore dispatcher for mainloop, representing a process channel
    (stdin, stdout, or stderr).  This class is abstract. """
    closed = ...
    def __init__(self, process, channel, fd) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def readable(self):
        ...
    
    def writable(self):
        ...
    
    def handle_read_event(self):
        ...
    
    def handle_write_event(self):
        ...
    
    def handle_error(self): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def flush(self): # -> None:
        ...
    


class POutputDispatcher(PDispatcher):
    """
    Dispatcher for one channel (stdout or stderr) of one process.
    Serves several purposes:

    - capture output sent within <!--XSUPERVISOR:BEGIN--> and
      <!--XSUPERVISOR:END--> tags and signal a ProcessCommunicationEvent
      by calling notify(event).
    - route the output to the appropriate log handlers as specified in the
      config.
    """
    childlog = ...
    normallog = ...
    capturelog = ...
    capturemode = ...
    output_buffer = ...
    def __init__(self, process, event_type, fd) -> None:
        """
        Initialize the dispatcher.

        `event_type` should be one of ProcessLogStdoutEvent or
        ProcessLogStderrEvent
        """
        ...
    
    def removelogs(self): # -> None:
        ...
    
    def reopenlogs(self): # -> None:
        ...
    
    def record_output(self): # -> None:
        ...
    
    def toggle_capturemode(self): # -> None:
        ...
    
    def writable(self): # -> Literal[False]:
        ...
    
    def readable(self): # -> bool:
        ...
    
    def handle_read_event(self): # -> None:
        ...
    


class PEventListenerDispatcher(PDispatcher):
    """ An output dispatcher that monitors and changes a process'
    listener_state """
    childlog = ...
    state_buffer = ...
    READY_FOR_EVENTS_TOKEN = ...
    RESULT_TOKEN_START = ...
    READY_FOR_EVENTS_LEN = ...
    RESULT_TOKEN_START_LEN = ...
    def __init__(self, process, channel, fd) -> None:
        ...
    
    def removelogs(self): # -> None:
        ...
    
    def reopenlogs(self): # -> None:
        ...
    
    def writable(self): # -> Literal[False]:
        ...
    
    def readable(self): # -> bool:
        ...
    
    def handle_read_event(self): # -> None:
        ...
    
    def handle_listener_state_change(self): # -> None:
        ...
    
    def handle_result(self, result): # -> None:
        ...
    


class PInputDispatcher(PDispatcher):
    """ Input (stdin) dispatcher """
    def __init__(self, process, channel, fd) -> None:
        ...
    
    def writable(self): # -> bool:
        ...
    
    def readable(self): # -> Literal[False]:
        ...
    
    def flush(self): # -> None:
        ...
    
    def handle_write_event(self): # -> None:
        ...
    


ANSI_ESCAPE_BEGIN = ...
ANSI_TERMINATORS = ...
def stripEscapes(s): # -> Literal[b'']:
    """
    Remove all ANSI color escapes from the given string.
    """
    ...

class RejectEvent(Exception):
    """ The exception type expected by a dispatcher when a handler wants
    to reject an event """
    ...


def default_handler(event, response): # -> None:
    ...
