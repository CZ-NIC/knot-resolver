"""
This type stub file was generated by pyright.
"""

callbacks = ...
def subscribe(type, callback): # -> None:
    ...

def unsubscribe(type, callback): # -> None:
    ...

def notify(event): # -> None:
    ...

def clear(): # -> None:
    ...

class Event:
    """ Abstract event type """
    ...


class ProcessLogEvent(Event):
    """ Abstract """
    channel = ...
    def __init__(self, process, pid, data) -> None:
        ...
    
    def payload(self): # -> str:
        ...
    


class ProcessLogStdoutEvent(ProcessLogEvent):
    channel = ...


class ProcessLogStderrEvent(ProcessLogEvent):
    channel = ...


class ProcessCommunicationEvent(Event):
    """ Abstract """
    BEGIN_TOKEN = ...
    END_TOKEN = ...
    def __init__(self, process, pid, data) -> None:
        ...
    
    def payload(self): # -> str:
        ...
    


class ProcessCommunicationStdoutEvent(ProcessCommunicationEvent):
    channel = ...


class ProcessCommunicationStderrEvent(ProcessCommunicationEvent):
    channel = ...


class RemoteCommunicationEvent(Event):
    def __init__(self, type, data) -> None:
        ...
    
    def payload(self): # -> str:
        ...
    


class SupervisorStateChangeEvent(Event):
    """ Abstract class """
    def payload(self): # -> Literal['']:
        ...
    


class SupervisorRunningEvent(SupervisorStateChangeEvent):
    ...


class SupervisorStoppingEvent(SupervisorStateChangeEvent):
    ...


class EventRejectedEvent:
    def __init__(self, process, event) -> None:
        ...
    


class ProcessStateEvent(Event):
    """ Abstract class, never raised directly """
    frm = ...
    to = ...
    def __init__(self, process, from_state, expected=...) -> None:
        ...
    
    def payload(self): # -> str:
        ...
    
    def get_extra_values(self): # -> list[Unknown]:
        ...
    


class ProcessStateFatalEvent(ProcessStateEvent):
    ...


class ProcessStateUnknownEvent(ProcessStateEvent):
    ...


class ProcessStateStartingOrBackoffEvent(ProcessStateEvent):
    def get_extra_values(self): # -> list[tuple[Literal['tries'], int]]:
        ...
    


class ProcessStateBackoffEvent(ProcessStateStartingOrBackoffEvent):
    ...


class ProcessStateStartingEvent(ProcessStateStartingOrBackoffEvent):
    ...


class ProcessStateExitedEvent(ProcessStateEvent):
    def get_extra_values(self): # -> list[tuple[Literal['expected'], int] | tuple[Literal['pid'], Unknown]]:
        ...
    


class ProcessStateRunningEvent(ProcessStateEvent):
    def get_extra_values(self): # -> list[tuple[Literal['pid'], Unknown]]:
        ...
    


class ProcessStateStoppingEvent(ProcessStateEvent):
    def get_extra_values(self): # -> list[tuple[Literal['pid'], Unknown]]:
        ...
    


class ProcessStateStoppedEvent(ProcessStateEvent):
    def get_extra_values(self): # -> list[tuple[Literal['pid'], Unknown]]:
        ...
    


class ProcessGroupEvent(Event):
    def __init__(self, group) -> None:
        ...
    
    def payload(self): # -> str:
        ...
    


class ProcessGroupAddedEvent(ProcessGroupEvent):
    ...


class ProcessGroupRemovedEvent(ProcessGroupEvent):
    ...


class TickEvent(Event):
    """ Abstract """
    def __init__(self, when, supervisord) -> None:
        ...
    
    def payload(self): # -> str:
        ...
    


class Tick5Event(TickEvent):
    period = ...


class Tick60Event(TickEvent):
    period = ...


class Tick3600Event(TickEvent):
    period = ...


TICK_EVENTS = ...
class EventTypes:
    EVENT = Event
    PROCESS_STATE = ProcessStateEvent
    PROCESS_STATE_STOPPED = ProcessStateStoppedEvent
    PROCESS_STATE_EXITED = ProcessStateExitedEvent
    PROCESS_STATE_STARTING = ProcessStateStartingEvent
    PROCESS_STATE_STOPPING = ProcessStateStoppingEvent
    PROCESS_STATE_BACKOFF = ProcessStateBackoffEvent
    PROCESS_STATE_FATAL = ProcessStateFatalEvent
    PROCESS_STATE_RUNNING = ProcessStateRunningEvent
    PROCESS_STATE_UNKNOWN = ProcessStateUnknownEvent
    PROCESS_COMMUNICATION = ProcessCommunicationEvent
    PROCESS_COMMUNICATION_STDOUT = ProcessCommunicationStdoutEvent
    PROCESS_COMMUNICATION_STDERR = ProcessCommunicationStderrEvent
    PROCESS_LOG = ProcessLogEvent
    PROCESS_LOG_STDOUT = ProcessLogStdoutEvent
    PROCESS_LOG_STDERR = ProcessLogStderrEvent
    REMOTE_COMMUNICATION = RemoteCommunicationEvent
    SUPERVISOR_STATE_CHANGE = SupervisorStateChangeEvent
    SUPERVISOR_STATE_CHANGE_RUNNING = SupervisorRunningEvent
    SUPERVISOR_STATE_CHANGE_STOPPING = SupervisorStoppingEvent
    TICK = TickEvent
    TICK_5 = Tick5Event
    TICK_60 = Tick60Event
    TICK_3600 = Tick3600Event
    PROCESS_GROUP = ProcessGroupEvent
    PROCESS_GROUP_ADDED = ProcessGroupAddedEvent
    PROCESS_GROUP_REMOVED = ProcessGroupRemovedEvent


def getEventNameByType(requested): # -> str | None:
    ...

def register(name, event): # -> None:
    ...
