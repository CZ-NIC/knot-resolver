"""
This type stub file was generated by pyright.
"""

import supervisor.medusa.asynchat_25 as asynchat

class file_logger:
    def __init__(self, file, flush=..., mode=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def write(self, data): # -> None:
        ...
    
    def writeline(self, line): # -> None:
        ...
    
    def writelines(self, lines): # -> None:
        ...
    
    def maybe_flush(self): # -> None:
        ...
    
    def flush(self): # -> None:
        ...
    
    def softspace(self, *args): # -> None:
        ...
    
    def log(self, message): # -> None:
        ...
    


class rotating_file_logger(file_logger):
    def __init__(self, file, freq=..., maxsize=..., flush=..., mode=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def next_backup(self, freq): # -> float | None:
        ...
    
    def maybe_flush(self): # -> None:
        ...
    
    def maybe_rotate(self): # -> None:
        ...
    
    def rotate(self): # -> None:
        ...
    


class socket_logger(asynchat.async_chat):
    def __init__(self, address) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def log(self, message): # -> None:
        ...
    


class multi_logger:
    def __init__(self, loggers) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def log(self, message): # -> None:
        ...
    


class resolving_logger:
    """Feed (ip, message) combinations into this logger to get a
    resolved hostname in front of the message.  The message will not
    be logged until the PTR request finishes (or fails)."""
    def __init__(self, resolver, logger) -> None:
        ...
    
    class logger_thunk:
        def __init__(self, message, logger) -> None:
            ...
        
        def __call__(self, host, ttl, answer): # -> None:
            ...
        
    
    
    def log(self, ip, message): # -> None:
        ...
    


class unresolving_logger:
    """Just in case you don't want to resolve"""
    def __init__(self, logger) -> None:
        ...
    
    def log(self, ip, message): # -> None:
        ...
    


def strip_eol(line):
    ...

class tail_logger:
    """Keep track of the last <size> log messages"""
    def __init__(self, logger, size=...) -> None:
        ...
    
    def log(self, message): # -> None:
        ...
