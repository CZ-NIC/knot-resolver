"""
This type stub file was generated by pyright.
"""

class DeferredWebProducer:
    """ A medusa producer that implements a deferred callback; requires
    a subclass of asynchat.async_chat that handles NOT_DONE_YET sentinel """
    CONNECTION = ...
    def __init__(self, request, callback) -> None:
        ...
    
    def more(self): # -> Type[NOT_DONE_YET] | Literal[''] | None:
        ...
    
    def sendresponse(self, response): # -> None:
        ...
    


class ViewContext:
    def __init__(self, **kw) -> None:
        ...
    


class MeldView:
    content_type = ...
    delay = ...
    def __init__(self, context) -> None:
        ...
    
    def __call__(self): # -> Type[NOT_DONE_YET]:
        ...
    
    def render(self): # -> None:
        ...
    
    def clone(self):
        ...
    


class TailView(MeldView):
    def render(self): # -> str:
        ...
    


class StatusView(MeldView):
    def actions_for_process(self, process): # -> list[dict[str, str | Unknown | None] | dict[str, str | Unknown]] | list[dict[str, str | Unknown | None] | dict[str, str | Unknown] | None]:
        ...
    
    def css_class_for_state(self, state): # -> Literal['statusrunning', 'statuserror', 'statusnominal']:
        ...
    
    def make_callback(self, namespec, action): # -> () -> str | () -> (Type[NOT_DONE_YET] | str) | () -> Unknown | () -> (str | Type[NOT_DONE_YET] | Unknown) | () -> (Type[NOT_DONE_YET] | Unknown):
        ...
    
    def render(self): # -> Type[NOT_DONE_YET] | str:
        ...
    


class OKView:
    delay = ...
    def __init__(self, context) -> None:
        ...
    
    def __call__(self): # -> dict[str, str]:
        ...
    


VIEWS = ...
class supervisor_ui_handler:
    IDENT = ...
    def __init__(self, supervisord) -> None:
        ...
    
    def match(self, request): # -> bool | None:
        ...
    
    def handle_request(self, request): # -> None:
        ...
    
    def continue_request(self, data, request): # -> None:
        ...
