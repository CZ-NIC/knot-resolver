{% from 'macros/common_macros.lua.j2' import string_table, boolean %}
{% from 'macros/policy_macros.lua.j2' import policy_get_tagset, policy_todname %}


{% macro local_data_root_fallback_addresses(pairs) -%}
hints.root({
{% for name, addresses in pairs.items() %}
  ['{{ name }}']={{ string_table(addresses) }},
{% endfor %}
})
{%- endmacro %}


{% macro local_data_root_fallback_addresses_files(files) -%}
{% for file in files %}
hints.root_file('{{ file }}')
{% endfor %}
{%- endmacro %}


{% macro local_data_addresses(pairs) -%}
{%- for name, addresses in pairs.items() -%}
{% for address in addresses %}
assert(hints.set('{{ name }} {{ address }}').result == true)
{% endfor %}
{%- endfor -%}
{%- endmacro %}


{% macro local_data_addresses_files(files) -%}
{% for file in files %}
assert(hints.add_hosts('{{ file }}').result == true)
{% endfor %}
{%- endmacro %}


{% macro local_data_records(input_str, is_rpz, ttl, nodata, tags=none, id='rrs') -%}
{{ id }} = ffi.new('struct kr_rule_zonefile_config')
{% if ttl %}
{{ id }}.ttl = {{ ttl.millis() }}
{% endif %}
{% if tags %}
{{ id }}.tags = {{ policy_get_tagset(tags) }}
{% endif %}
{{ id }}.nodata = {{ boolean(nodata) }}
{{ id }}.is_rpz = {{ boolean(is_rpz) }}
{% if is_rpz -%}
{{ id }}.filename = '{{ input_str }}'
{% else %}
{{ id }}.input_str = [[
{{ input_str.multiline() }}
]]
{% endif %}
assert(C.kr_rule_zonefile({{ id }})==0)
{%- endmacro %}

{% macro local_data_emptyzone(dname, tags) -%}
assert(C.kr_rule_local_data_emptyzone({{ dname }},{{ tags }})==0)
{%- endmacro %}

{% macro local_data_nxdomain(dname, tags) -%}
assert(C.kr_rule_local_data_nxdomain({{ dname }},{{ tags }})==0)
{%- endmacro %}

{% macro local_data_subtree_root(type, root, tags) -%}
{%- if tags -%}
{%- set get_tags = policy_get_tagset(tags) -%}
{%- else -%}
{%- set get_tags = '0' -%}
{%- endif -%}
{%- if type == 'empty' -%}
{{ local_data_emptyzone(policy_todname(root), get_tags) }}
{%- elif type == 'nxdomain' -%}
{{ local_data_nxdomain(policy_todname(root), get_tags) }}
{%- else -%}
{# TODO: implement other possible types #}
{%- endif -%}
{%- endmacro %}
