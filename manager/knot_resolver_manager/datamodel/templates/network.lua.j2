{% from 'macros/common_macros.lua.j2' import boolean, module_loader, modules_load %}
{% from 'macros/network_macros.lua.j2' import network_listen, http_config, net_tls, net_tls_padding, proxy_allowed, renumber_config %}

--------------------------------------------------------------------------------
-- NETWORK configuration
--------------------------------------------------------------------------------

-- network.do-ipv4/6
net.ipv4 = {{ boolean(cfg.network.do_ipv4) }}
net.ipv6 = {{ boolean(cfg.network.do_ipv6) }}

{% if cfg.network.out_interface_v4 %}
-- network.out-interface-v4
net.outgoing_v4('{{ cfg.network.out_interface_v4 }}')
{% endif %}

{% if cfg.network.out_interface_v6 %}
-- network.out-interface-v6
net.outgoing_v6('{{ cfg.network.out_interface_v6 }}')
{% endif %}

-- network.tcp-pipeline
net.tcp_pipeline({{ cfg.network.tcp_pipeline }})

-- network.edns-keep-alive
{{ module_loader(cfg.network.edns_tcp_keepalive, 'edns_keepalive') }}

-- network.edns-buffer-size
net.bufsize(
    {{ cfg.network.edns_buffer_size.upstream.bytes() }},
    {{ cfg.network.edns_buffer_size.downstream.bytes() }}
)

{% if cfg.network.tls.cert_file or cfg.network.tls.key_file %}
-- network.tls
{{ net_tls(cfg.network.tls.cert_file, cfg.network.tls.key_file) }}
{% endif %}

{% if cfg.network.tls.sticket_secret %}
-- network.tls.sticket-secret
net.tls_sticket_secret('{{ cfg.network.tls.sticket_secret }}')
{% endif %}

{% if cfg.network.tls.sticket_secret_file %}
-- network.tls.sticket-secret-file
net.tls_sticket_secret_file('{{ cfg.network.tls.sticket_secret_file }}')
{% endif %}

-- network.tls.auto-discovery
{{ module_loader(cfg.network.tls.auto_discovery, 'experimental_dot_auth') }}

-- network.tls.padding
{{ net_tls_padding(cfg.network.tls.padding ) }}

{% if cfg.network.address_renumbering %}
-- network.address-renumbering
{{ modules_load('renumber') }}
{{ renumber_config(cfg.network.address_renumbering) }}
{% endif %}

-- network.proxy-protocol
{{ proxy_allowed(cfg.network.proxy_protocol) }}

{%- set vars = {'doh_legacy': false} -%}
{% for listen in cfg.network.listen if listen.kind == "doh-legacy" -%}
{%- if vars.update({'doh_legacy': true}) -%}{%- endif -%}
{%- endfor %}

{% if vars.doh_legacy %}
-- doh_legacy http config
{{ modules_load('http') }}
{{ http_config("doh_legacy", true, cfg.network.tls.cert_file, cfg.network.tls.key_file) }}
{% endif %}

-- network.listen
{% for listen in cfg.network.listen -%}
{{ network_listen(listen) }}
{%- endfor %}
