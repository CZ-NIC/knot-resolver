[tool.poetry]
name = "knot-resolver-manager"
version = "0.1.0"
description = "A central management tool for multiple instances of Knot Resolver"
authors = [
    "Vašek Šraier <git@vakabus.cz>",
    "Aleš Mrázek <ales.mrazek@nic.cz>"
]

[tool.poetry.dependencies]
python = "^3.6.12"
aiohttp = "^3.6.12"
strictyaml = "^1.3.2"
pydbus = "^0.6.0"
PyGObject = "^3.38.0"
Jinja2 = "^2.11.3"

[tool.poetry.dev-dependencies]
pytest = "^5.2"
pytest-cov = "^2.11.1"
flake8 = "^3.8.4"
black = "^20.8b1"
tox = "^3.21.4"
tox-pyenv = "^1.1.0"
poethepoet = "^0.9.0"
prospector = {extras = ["with_mypy", "with_bandit"], version = "^1.3.1"}
requests = "^2.25.1"
requests-unixsocket = "^0.2.0"
click = "^7.1.2"
toml = "^0.10.2"
debugpy = "^1.2.1"

[tool.poe.tasks]
run = { cmd = "python -m knot_resolver_manager", help = "Run the manager" }
run-debug = { cmd = "scripts/run-debug", help = "Run the manager under debugger" }
test = { cmd = "pytest --cov=knot_resolver_manager --show-capture=all tests/", help = "Run tests" }
check = { cmd = "scripts/codecheck", help = "Run static code analysis" }
format = { cmd = "poetry run black knot_resolver_manager/ tests/", help = "Run 'Black' code formater" }
fixdeps = { shell = "poetry install; yarn install", help = "Install/update dependencies according to configuration files"}
commit = { shell = "scripts/commit", help = "Invoke every single check before commiting" }
container-build = { cmd = "scripts/container-buildall", help = "Build all containers" }
container-run = { cmd = "scripts/container-run.py", help = "Run a container" }
clean = """
  rm -rf .coverage
         .mypy_cache
         .pytest_cache
         ./**/__pycache__
         dist
         .tox
"""
tox = { cmd = "tox", help = "Run tests in tox" }
integration = {cmd = "python integration/runner.py", help = "Run integration tests" }


[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py36, py37, py38, py39

[tox:.package]
# note tox will use the same python version as under what tox is installed to package
# so unless this is python 3 you can require a given python version for the packaging
# environment via the basepython key
basepython = python3

[testenv]
deps = poetry
commands =
    poetry install -v
    ./poe test
"""

# pylint configuration copied from apkg (https://gitlab.nic.cz/packaging/apkg/-/blob/master/pylintrc)
[tool.pylint."MESSAGES CONTROL"]
disable= [
    "broad-except",
    "fixme",
    "global-statement",
    "invalid-name",
    "line-too-long",  # checked by flake8
    "missing-docstring",
    "no-else-return",
    "no-self-use",
    "raise-missing-from",
    "too-few-public-methods",
    "unused-import",  # checked by flake8,
    "bad-continuation", # conflicts with black
    "consider-using-in", # pyright can't see through in expressions,
    "too-many-return-statements", # would prevent us from using recursive tree traversals
]

[tool.pylint.SIMILARITIES]
min-similarity-lines = "6"
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "no"

[tool.pylint.DESIGN]
max-parents = "10"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
