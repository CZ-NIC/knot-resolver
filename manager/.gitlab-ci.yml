stages:
  - check
  - packaging

default:
  image: registry.nic.cz/knot/knot-resolver-manager/knot-manager:ci
  before_script:
    # make sure Poetry is in $PATH
    - source $HOME/.poetry/env
    # there is already a pyproject.toml with installed dependencies in the root
    # it has its own virtualenv and we want to use that env in a different directory
    # so let's create a new one and replace it by the already existing one
    # we don't care about destroying the environment in process, because it's going to be discarded anyway
    - poetry env use $(which python3.6); ourpath=$(poetry env info -p); upperpath=$( (cd ..; poetry env info -p) ); rm -rf "$ourpath"; cp -a "$upperpath" "$ourpath"
    # the virtualenv we recycled might be slightly out of date. Let's quickly update it
    - poetry install
    # fix podman; see https://gitlab.nic.cz/labs/lxc-gitlab-runner#nesting-with-podman
    - unset TMPDIR
  tags:
    - lxc
    - amd64

lint:
  stage: check
  script:
    - poe check

test:
  stage: check
  script:
    - poe test
    - poetry run coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml

integration:
  stage: check
  script:
    - poe integration


package-debian:
  when: manual
  stage: packaging
  image: registry.nic.cz/labs/lxc-gitlab-runner/debian-10
  before_script: []
  script:
    - bash scripts/make-debian-package.sh
  artifacts:
    paths:
      - knot-resolver/pkg/pkgs/debian-10
      - knot-resolver/pkg/srcpkgs/debian-10
    expire_in: 1 week
