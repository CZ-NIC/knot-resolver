stages:
  - build
  - check

image: registry.nic.cz/knot/knot-resolver-manager/devenv:latest

# Ideally, the CI would build it's own container and use it afterwards. This workflow should be supported,
# at least according to the GitLab documentation:
# https://gitlab.nic.cz/help/user/packages/container_registry/index#container-registry-examples-with-gitlab-cicd
# Sadly, it does not work on our infrastructure. I did not however test it thoroughly and/or consulted it with
# anyone else. So it might be fixable. For now, let's leave the config here and we might fix it in the future.
#
# build:
#   image: docker:19.03.12
#   stage: build
#   services:
#     - docker:19.03.12-dind
#   variables:
#     IMAGE_TAG: $CI_REGISTRY/knot/knot-resolver-manager/ci/devenv:latest
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build -t $IMAGE_TAG ci/devenv
#     - docker push $IMAGE_TAG


# agressively cache Poetry's and NPM's data
cache:
  key: "always-the-same-cache"
  paths:
    - node_modules/
    - .venv/
  policy: pull-push

lint:
  stage: check
  script:
    # run the actual tests
    - poetry env use $(pyenv which python)
    - poetry install
    - npm install
    - ./poe check
