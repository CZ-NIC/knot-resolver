-- SPDX-License-Identifier: GPL-3.0-or-later

{% for TAF in TRUST_ANCHOR_FILES %}
trust_anchors.add_file('{{TAF}}')
{% endfor %}

{% raw %}
-- insert NS record pointing to a non-delegated DNS server
cache.open(1*MB)
cache.clear()

local ffi = require('ffi')
local c = kres.context().cache
ns_name = todname('ns.example.com')
local ns_addr = '\1\2\3\4'
local rr = kres.rrset(ns_name, kres.type.A, kres.class.IN, 3600999999)
assert(rr:add_rdata(ns_addr, #ns_addr))
assert(c:insert(rr, nil, ffi.C.KR_RANK_SECURE))

rr_ns = kres.rrset(todname('example.com'), kres.type.NS, kres.class.IN, 3600)
assert(rr_ns:add_rdata(ns_name, #ns_name))
assert(c:insert(rr_ns, nil, bit.bor(ffi.C.KR_RANK_AUTH, ffi.C.KR_RANK_INSECURE)))

c:commit()
assert(cache.count() > 0)

-- from now on queries for domain example.com should go directly to IP addr 1.2.3.4

-- Disable RFC5011 TA update
if ta_update then
        modules.unload('ta_update')
end

-- Disable RFC8145 signaling, scenario doesn't provide expected answers
if ta_signal_query then
        modules.unload('ta_signal_query')
end

-- Disable RFC8109 priming, scenario doesn't provide expected answers
if priming then
        modules.unload('priming')
end

-- Disable this module because it makes one priming query
if detect_time_skew then
        modules.unload('detect_time_skew')
end

_hint_root_file('hints')
verbose(true)
{% endraw %}

net = { '{{SELF_ADDR}}' }


{% if QMIN == "false" %}
option('NO_MINIMIZE', true)
{% else %}
option('NO_MINIMIZE', false)
{% endif %}


-- Self-checks on globals
assert(help() ~= nil)
assert(worker.id ~= nil)
-- Self-checks on facilities
assert(cache.stats() ~= nil)
assert(cache.backends() ~= nil)
assert(worker.stats() ~= nil)
assert(net.interfaces() ~= nil)
-- Self-checks on loaded stuff
assert(net.list()[1].transport.ip == '{{SELF_ADDR}}')
assert(#modules.list() > 0)
-- Self-check timers
ev = event.recurrent(1 * sec, function (ev) return 1 end)
event.cancel(ev)
ev = event.after(0, function (ev) return 1 end)
