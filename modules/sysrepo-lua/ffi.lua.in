local ffi = require("ffi")

-- The exact path is configured during project build by meson
local clib = ffi.load("@modules_dir@/sysrepo-lua/cbindings.so")

-------------------------------------------------------------------------------
--                      FFI initialization
-------------------------------------------------------------------------------

local function initialize_ffi()
    --- Definition of `sr_val_t` copied from sysrepo.h on 2020-01-01.
    ffi.cdef[[

    typedef void (*apply_conf_f)(struct lyd_node *root);
    typedef void (*read_conf_f)(struct lyd_node* root);
    int sysrepo_init(apply_conf_f apply_conf);
    int sysrepo_deinit(void);

    /** Given a libyang node, returns it's first child */
    struct lyd_node* node_child_first(struct lyd_node* parent);
    /** Given a libyang node, return next sibling or NULL if there isn't any */
    struct lyd_node* node_child_next(struct lyd_node* prev_child);
    /** Given a libyang node, return it's name from schema */
    const char* node_get_name(struct lyd_node* node);
    /** Given a libyang node, return it's value as a string */
    const char* node_get_value_str(struct lyd_node* node);

    ]]
end

-- make sure this module runs just once
-- LuaJIT's FFI can't be initialized multiple times for the same types
if (_KNOT_SYSREPO_FFI_INITIALIZED == true) then
    -- nothing to initialize then
else
    initialize_ffi()
    _KNOT_SYSREPO_FFI_INITIALIZED = true
end

-- TODO version check so that we can not load new module into an old Knot

-------------------------------------------------------------------------------
--                      Callback management
-------------------------------------------------------------------------------

local callbacks = {}
local function create_callback(ctype ,func)
    assert(type(ctype) == "string")
    assert(type(func) == "function")

    local cb = ffi.cast(ctype, func)
    table.insert(callbacks, cb)
    return cb
end

local function free_callbacks()
    for _, cb in ipairs(callbacks) do
        cb:free()
    end
end


-------------------------------------------------------------------------------
--                      Exported functionality
-------------------------------------------------------------------------------

local sysrepo_ffi = {}

function sysrepo_ffi.init(apply_conf_func)
    local cb = create_callback("apply_conf_f", apply_conf_func)
    local res = clib.sysrepo_init(cb)
    if res ~= 0 then
        error("Initialization failed with error code " .. tostring(res))
    end
end

function sysrepo_ffi.deinit()
    local res = clib.sysrepo_deinit()
    free_callbacks()
    if res ~= 0 then
        error("Deinitialization failed with error code " .. tostring(res))
    end
end

function sysrepo_ffi.get_clib_bindings()
    return clib
end

return sysrepo_ffi
