-- SPDX-License-Identifier: GPL-3.0-or-later

{% for TAF in TRUST_ANCHOR_FILES %}
trust_anchors.add_file('{{TAF}}', true)
{% endfor %}

{% raw %}

cb_counter = 0
function inc_cb()
	cb_counter = cb_counter + 1
end

function check_status(state, query)
	local answer = query.request.answer
	-- status was present for 10 days
	print('--> CFG: cb_counter='..cb_counter)
	if cb_counter == 10 then
		return policy.DENY_MSG('check last answer')
	end
end
ta_update.refresh_time = 12 * hour
ta_update.cb_unmanagedkey_change = inc_cb
policy.add(check_status, true)

-- Disable RFC8145 signaling, scenario doesn't provide expected answers
if ta_signal_query then
        modules.unload('ta_signal_query')
end

-- Disable RFC8109 priming, scenario doesn't provide expected answers
if priming then
        modules.unload('priming')
end

-- Disable this module because it make one priming query
if detect_time_skew then
        modules.unload('detect_time_skew')
end

policy.add(policy.suffix(policy.PASS, {todname('test.')}))
_hint_root_file('hints')
cache.size = 2*MB
verbose(true)
{% endraw %}

net = { '{{SELF_ADDR}}' }


{% if QMIN == "false" %}
option('NO_MINIMIZE', true)
{% else %}
option('NO_MINIMIZE', false)
{% endif %}


-- Self-checks on globals
assert(help() ~= nil)
assert(worker.id ~= nil)
-- Self-checks on facilities
assert(cache.count() == 0)
assert(cache.stats() ~= nil)
assert(cache.backends() ~= nil)
assert(worker.stats() ~= nil)
assert(net.interfaces() ~= nil)
-- Self-checks on loaded stuff
assert(net.list()[1].transport.ip == '{{SELF_ADDR}}')
assert(#modules.list() > 0)
-- Self-check timers
ev = event.recurrent(1 * sec, function (ev) return 1 end)
event.cancel(ev)
ev = event.after(0, function (ev) return 1 end)
