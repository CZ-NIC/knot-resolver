-- SPDX-License-Identifier: GPL-3.0-or-later

trust_anchors.remove('.')
{% for TAF in TRUST_ANCHOR_FILES %}
trust_anchors.add_file('{{TAF}}')
{% endfor %}

{% raw %}
-- Disable RFC5011 TA update
if ta_update then
        modules.unload('ta_update')
end

-- Disable RFC8145 signaling, scenario doesn't provide expected answers
if ta_signal_query then
        modules.unload('ta_signal_query')
end

-- Disable RFC8109 priming, scenario doesn't provide expected answers
if priming then
        modules.unload('priming')
end

-- Disable this module because it make one priming query
if detect_time_skew then
        modules.unload('detect_time_skew')
end

cache.size = 2*MB
verbose(true)
policy.add(policy.all(policy.DEBUG_ALWAYS))
policy.add(policy.all(policy.FORWARD('8.8.8.8')))
{% endraw %}

net = { '{{SELF_ADDR}}' }

-- Self-checks on globals
assert(help() ~= nil)
assert(worker.id ~= nil)
-- Self-checks on facilities
assert(cache.count() == 0)
assert(cache.stats() ~= nil)
assert(cache.backends() ~= nil)
assert(worker.stats() ~= nil)
assert(net.interfaces() ~= nil)
-- Self-checks on loaded stuff
assert(net.list()[1].transport.ip == '{{SELF_ADDR}}')
assert(#modules.list() > 0)
-- Self-check timers
ev = event.recurrent(1 * sec, function (ev) return 1 end)
event.cancel(ev)
ev = event.after(0, function (ev) return 1 end)
