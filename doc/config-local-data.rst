.. SPDX-License-Identifier: GPL-3.0-or-later

.. _config-local-data:

Local Data and RPZ
==================

Local overrides for DNS data may be defined in the :option:`local-data <local-data:>` configuration tree.
It provides various input formats described in following subsections.

.. option:: local-data:

   .. option:: ttl: <time ms|s|m|h|d>

      Optional, this allows to write the new TTL value for records generated by the local-data.

   .. option:: nodata: true|false

      :default: true

      Enabling NODATA synthesis, false if disabling.
      If set to true (the default), an empty answer will be synthesised for matching name but mismatching type (e.g. AAAA query when only A hint exists).

   Records
   -------

   The typical use case is to define some name-address pairs, which also generate corresponding
   `reverse PTR records <https://en.wikipedia.org/wiki/Reverse_DNS_lookup>`_.


   .. option:: addresses: <dict[hostname, address]>

      Optional, direct addition of hostname and IP address pairs.

   .. option:: addresses-files: <list of paths>

      Optional direct addition of hostname and IP address pairs from files in ``/etc/hosts`` like format.

   .. code-block:: yaml

      local-data:
        addresses:
          a1.example.com: 2001:db8::1
          a2.example.com: 2001:db8::2
        addresses-files:
          - /etc/hosts
        # some options
        ttl: 5m
        nodata: false # don't force empty answer for missing record types on mentioned names

   .. option:: records: <zonefile format string>

      Optional, direct addition of records in DNS zonefile format.
      The zonefile syntax is more flexible, e.g. it can define any type of records.

   .. code-block:: yaml

      local-data:
        records: |
          www.google.com.  CNAME  forcesafesearch.google.com.
          example.com  TXT  "an example text record"
          34.example.com  AAAA  2001:db8::3
          34.example.com  AAAA  2001:db8::4

   Response Policy Zones (RPZ)
   ---------------------------

   `RPZ <https://dnsrpz.info>`_ files are another way of adding rules.

   .. option:: rpz: <list>

      .. option:: file: <path>

         Path to a RPZ zonefile.

      .. option:: tags: <list of tags>

         Optional, tags to link with other policy rules, e.g. :ref:`views <config-views>`.

   .. code-block:: yaml

      local-data:
        rpz:
          - file: /tmp/adult.rpz
            tags: [ adult ]
            # security blocklist applied for everyone
          - file: /tmp/security.rpz

   So far, RPZ support is limited to the most common features:

   * just files which are *not* automatically reloaded when changed
   * rules with ``rpz-*`` labels are ignored, e.g. ``.rpz-client-ip``
   * ``CNAME *.some.thing`` does not expand the wildcard

   Advanced rules
   --------------

   .. option:: subtrees: <list>

      This allows defining more complex sets of rules.
      It allows blocking whole subtrees.

      .. future: or use tags on ``addresses`` and ``records` rules

      .. option:: type: empty|nxdomain|redirect

         Type of a subtree.

      .. option:: tags: <list of tags>

         Optional, tags to link with other policy rules, e.g. :ref:`views <config-views>`.

   .. future
      .. option:: addresses: <list of addresses>

         Optional, subtree addresses.

      One of, :option:`roots <roots: <list of hostnames>>`, :option:`roots-file <roots-file: <path>>` or :option:`roots-url <roots-url: <url>>` must be configured.

      .. option:: roots: <list of hostnames>

         Subtree roots.

      .. option:: roots-file: <path>

         Subtree roots from given file.

      .. option:: roots-url: <url>

         Subtree roots from given URL.

      .. option:: refresh: <time ms|s|m|h|d>

         Refresh time to update data from :option:`roots-file <roots-file: <path>>` or :option:`roots-url <roots-url: <url>>`.


   .. code-block:: yaml

      local-data:
        subtrees:
          - type: empty
            tags: [ malware ]
            roots: [ evil.example.org, malware.example.net ]

.. future
      - records: |
          www.google.com.  CNAME  forcesafesearch.google.com.
        tags: [ adult ]
